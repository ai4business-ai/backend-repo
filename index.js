require('dotenv').config();
const express = require('express');
const cors = require('cors');
const { Telegraf } = require('telegraf');
const { OpenAI } = require('openai');

const app = express();
app.use(cors());
app.use(express.json());

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const OPENAI_API_KEY = process.env.OPENAI_API_KEY;
const TELEGRAM_BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN;
const WEBHOOK_URL = process.env.WEBHOOK_URL || `https://${process.env.RENDER_EXTERNAL_HOSTNAME || 'localhost'}`;
const NODE_ENV = process.env.NODE_ENV || 'development';

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ç—Ä–µ–±—É–µ–º—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
if (!OPENAI_API_KEY) {
  console.error('OPENAI_API_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ .env —Ñ–∞–π–ª–µ');
  process.exit(1);
}

if (!TELEGRAM_BOT_TOKEN) {
  console.error('TELEGRAM_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ .env —Ñ–∞–π–ª–µ');
  process.exit(1);
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è OpenAI
const openai = new OpenAI({
  apiKey: OPENAI_API_KEY,
});

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
const bot = new Telegraf(TELEGRAM_BOT_TOKEN);

// –•—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
const userStates = {};

// –û–±—Ä–∞–±–æ—Ç–∫–∞ /start
bot.start((ctx) => {
  ctx.reply('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ AI Factory! –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –∏–∑ –º–µ–Ω—é.', {
    reply_markup: {
      inline_keyboard: [
        [{ text: "–û—Ç–∫—Ä—ã—Ç—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã", web_app: { url: process.env.FRONTEND_URL || "https://ai4business-ai.github.io/frontend-repo/" } }]
      ]
    }
  });
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–º–æ—â–∏
bot.help((ctx) => {
  ctx.reply('AI Factory –ø–æ–º–æ–≥–∞–µ—Ç –≤–∞–º —Å–æ–∑–¥–∞–≤–∞—Ç—å –∏ —Ä–∞–∑–≤–∏–≤–∞—Ç—å –±–∏–∑–Ω–µ—Å —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ò–ò. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–û—Ç–∫—Ä—ã—Ç—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã" –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É.', {
    reply_markup: {
      inline_keyboard: [
        [{ text: "–û—Ç–∫—Ä—ã—Ç—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã", web_app: { url: process.env.FRONTEND_URL || "https://ai4business-ai.github.io/frontend-repo/" } }]
      ]
    }
  });
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å OpenAI Assistants
async function getAssistantResponse(prompt, userInput) {
  try {
    console.log(`–°–æ–∑–¥–∞–Ω–∏–µ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π: ${prompt.substring(0, 50)}...`);
    
    // –°–æ–∑–¥–∞–µ–º –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
    const assistant = await openai.beta.assistants.create({
      name: "AI Factory Business Assistant",
      instructions: prompt,
      model: "gpt-4-turbo-preview",
      tools: [{ type: "code_interpreter" }]
    });
    
    console.log(`–°–æ–∑–¥–∞–Ω –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç ID: ${assistant.id}`);
    
    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ç—Ä–µ–¥ –¥–ª—è —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
    const thread = await openai.beta.threads.create();
    console.log(`–°–æ–∑–¥–∞–Ω —Ç—Ä–µ–¥ ID: ${thread.id}`);
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ç—Ä–µ–¥
    await openai.beta.threads.messages.create(thread.id, {
      role: "user",
      content: userInput
    });
    console.log(`–î–æ–±–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${userInput.substring(0, 50)}...`);
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
    const run = await openai.beta.threads.runs.create(thread.id, {
      assistant_id: assistant.id
    });
    console.log(`–ó–∞–ø—É—â–µ–Ω –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç, run ID: ${run.id}`);
    
    // –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
    let runStatus = await openai.beta.threads.runs.retrieve(thread.id, run.id);
    console.log(`–ù–∞—á–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å: ${runStatus.status}`);
    
    // –û–∂–∏–¥–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞
    while (['in_progress', 'queued', 'requires_action'].includes(runStatus.status)) {
      console.log(`–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å: ${runStatus.status}, –æ–∂–∏–¥–∞–µ–º...`);
      await new Promise(resolve => setTimeout(resolve, 1000));
      runStatus = await openai.beta.threads.runs.retrieve(thread.id, run.id);
      
      if (runStatus.status === 'failed') {
        console.error('–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞:', runStatus.last_error);
        throw new Error(`Assistant run failed: ${runStatus.last_error?.message || 'Unknown error'}`);
      }
    }
    
    console.log(`–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º: ${runStatus.status}`);
    
    // –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
    const messages = await openai.beta.threads.messages.list(thread.id);
    
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
    const assistantMessages = messages.data.filter(msg => msg.role === 'assistant');
    if (assistantMessages.length > 0) {
      const lastMessage = assistantMessages[0];
      console.log(`–ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –¥–ª–∏–Ω–æ–π: ${lastMessage.content[0].text.value.length} —Å–∏–º–≤–æ–ª–æ–≤`);
      return lastMessage.content[0].text.value;
    }
    
    return "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞.";
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ OpenAI Assistant:', error);
    throw error;
  }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ—Ç –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
bot.on('web_app_data', async (ctx) => {
  try {
    console.log('–ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –∏–∑ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:', ctx.from.id);
    console.log('–ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:', ctx.webAppData.data);
    
    let data;
    try {
      data = JSON.parse(ctx.webAppData.data);
      console.log('–†–∞–∑–æ–±—Ä–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:', data);
    } catch (jsonError) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–æ—Ä–µ JSON –∏–∑ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:', jsonError);
      return ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
    }
    
    if (data.action === "openGPT" && data.tool === "marketAnalysisBtn") {
      // –ó–∞–ø–æ–º–∏–Ω–∞–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∂–¥–µ—Ç –∞–Ω–∞–ª–∏–∑–∞ —Ä—ã–Ω–∫–∞
      userStates[ctx.from.id] = { 
        waitingFor: 'marketAnalysisBtn'
      };
      
      await ctx.reply('üîç –ê–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞ –∏ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤');
      await ctx.reply('–û–ø–∏—à–∏—Ç–µ –≤–∞—à –±–∏–∑–Ω–µ—Å –∏–ª–∏ –ø—Ä–æ–¥—É–∫—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ä—ã–Ω–∫–∞:');
    } else if (data.action === "businessIdea") {
      await ctx.reply('üí° –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –±–∏–∑–Ω–µ—Å-–∏–¥–µ–π');
      await ctx.reply('–û–ø–∏—à–∏—Ç–µ –æ–±–ª–∞—Å—Ç—å –∏–ª–∏ –∏–Ω—Ç–µ—Ä–µ—Å—ã, –¥–ª—è –∫–æ—Ç–æ—Ä—ã—Ö –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –∏–¥–µ–∏:');
      
      userStates[ctx.from.id] = { 
        waitingFor: 'businessIdea'
      };
    } else if (data.action === "businessModel") {
      await ctx.reply('üìù –°–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –±–∏–∑–Ω–µ—Å-–º–æ–¥–µ–ª–∏');
      await ctx.reply('–û–ø–∏—à–∏—Ç–µ –≤–∞—à –±–∏–∑–Ω–µ—Å –¥–ª—è —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –±–∏–∑–Ω–µ—Å-–º–æ–¥–µ–ª–∏:');
      
      userStates[ctx.from.id] = { 
        waitingFor: 'businessModel'
      };
    } else if (data.action === "cases") {
      await ctx.reply('üìö –ü–æ–¥–±–æ—Ä –∏–¥–µ–π –∏–∑ –∫–µ–π—Å–æ–≤');
      await ctx.reply('–û–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É –∏–ª–∏ –æ—Ç—Ä–∞—Å–ª—å –¥–ª—è –ø–æ–¥–±–æ—Ä–∞ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö –∫–µ–π—Å–æ–≤:');
      
      userStates[ctx.from.id] = { 
        waitingFor: 'cases'
      };
    } else {
      await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é –∏–∑ –º–µ–Ω—é –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤');
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:', error);
    ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
bot.on('text', async (ctx) => {
  const userId = ctx.from.id;
  const userState = userStates[userId];
  
  // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤ —Ä–µ–∂–∏–º–µ –æ–∂–∏–¥–∞–Ω–∏—è, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º
  if (!userState) return;
  
  const userInput = ctx.message.text;
  const waitingFor = userState.waitingFor;
  
  // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  delete userStates[userId];
  
  await ctx.reply('‚è≥ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, —ç—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è...');
  
  try {
    let prompt = '';
    // –í—ã–±–∏—Ä–∞–µ–º –ø—Ä–æ–º–ø—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∑–∞–ø—Ä–æ—à–µ–Ω–Ω–æ–≥–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
    switch (waitingFor) {
      case 'marketAnalysisBtn':
        prompt = "–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –∞–Ω–∞–ª–∏–∑—É —Ä—ã–Ω–∫–∞. –ü—Ä–æ–≤–µ–¥–∏ –∫—Ä–∞—Ç–∫–∏–π –∞–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞ –∏ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –±–∏–∑–Ω–µ—Å–∞ –∏–ª–∏ –ø—Ä–æ–¥—É–∫—Ç–∞. –£–∫–∞–∂–∏: –æ—Å–Ω–æ–≤–Ω—ã–µ —Å–µ–≥–º–µ–Ω—Ç—ã —Ä—ã–Ω–∫–∞, –∫–ª—é—á–µ–≤—ã—Ö –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤, –ø—Ä–∏–º–µ—Ä–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Ä—ã–Ω–∫–∞, —Ç—Ä–µ–Ω–¥—ã –∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏. –¢–≤–æ–π –æ—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –∏ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –ø–æ–ª–µ–∑–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏.";
        break;
      case 'businessIdea':
        prompt = "–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –±–∏–∑–Ω–µ—Å-–∏–¥–µ–π. –ü—Ä–µ–¥–ª–æ–∂–∏ 5 –∏–Ω–Ω–æ–≤–∞—Ü–∏–æ–Ω–Ω—ã—Ö –±–∏–∑–Ω–µ—Å-–∏–¥–µ–π –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–ª–µ–¥—É—é—â–∏—Ö –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤ –∏–ª–∏ –æ–±–ª–∞—Å—Ç–∏. –î–ª—è –∫–∞–∂–¥–æ–π –∏–¥–µ–∏ —É–∫–∞–∂–∏: –∫–æ–Ω—Ü–µ–ø—Ü–∏—é, –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—É—é —Ü–µ–ª–µ–≤—É—é –∞—É–¥–∏—Ç–æ—Ä–∏—é, –ø—Ä–∏–º–µ—Ä—ã —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∏ –≤–æ–∑–º–æ–∂–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –¥–æ—Ö–æ–¥–∞. –¢–≤–æ–π –æ—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –∏ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏.";
        break;
      case 'businessModel':
        prompt = "–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –±–∏–∑–Ω–µ—Å-–º–æ–¥–µ–ª–∏—Ä–æ–≤–∞–Ω–∏—é. –°–æ–∑–¥–∞–π —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—É—é –±–∏–∑–Ω–µ—Å-–º–æ–¥–µ–ª—å –¥–ª—è –æ–ø–∏—Å–∞–Ω–Ω–æ–≥–æ –±–∏–∑–Ω–µ—Å–∞, –∏—Å–ø–æ–ª—å–∑—É—è —Å—Ç—Ä—É–∫—Ç—É—Ä—É Canvas. –í–∫–ª—é—á–∏ —Å–ª–µ–¥—É—é—â–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã: —Ü–µ–Ω–Ω–æ—Å—Ç–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ, —Å–µ–≥–º–µ–Ω—Ç—ã –∫–ª–∏–µ–Ω—Ç–æ–≤, –∫–∞–Ω–∞–ª—ã —Å–±—ã—Ç–∞, –≤–∑–∞–∏–º–æ–æ—Ç–Ω–æ—à–µ–Ω–∏—è —Å –∫–ª–∏–µ–Ω—Ç–∞–º–∏, –ø–æ—Ç–æ–∫–∏ –¥–æ—Ö–æ–¥–æ–≤, –∫–ª—é—á–µ–≤—ã–µ —Ä–µ—Å—É—Ä—Å—ã, –∫–ª—é—á–µ–≤—ã–µ –≤–∏–¥—ã –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏, –∫–ª—é—á–µ–≤—ã–µ –ø–∞—Ä—Ç–Ω–µ—Ä—ã –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ä–∞—Å—Ö–æ–¥–æ–≤. –¢–≤–æ–π –æ—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –∏ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏.";
        break;
      case 'cases':
        prompt = "–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –±–∏–∑–Ω–µ—Å-–∫–µ–π—Å–∞–º. –ü–æ–¥–±–µ—Ä–∏ 3-5 —Ä–µ–∞–ª—å–Ω—ã—Ö –∫–µ–π—Å–æ–≤ —É—Å–ø–µ—à–Ω—ã—Ö –∫–æ–º–ø–∞–Ω–∏–π, –∫–æ—Ç–æ—Ä—ã–µ —Ä–µ—à–∞–ª–∏ –ø–æ—Ö–æ–∂–∏–µ –ø—Ä–æ–±–ª–µ–º—ã –∏–ª–∏ —Ä–∞–±–æ—Ç–∞–ª–∏ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–π –æ—Ç—Ä–∞—Å–ª–∏. –î–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–µ–π—Å–∞ —É–∫–∞–∂–∏: –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏, –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã, –ø—Ä–∏–º–µ–Ω–µ–Ω–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ, –∏ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã. –¢–∞–∫–∂–µ –¥–æ–±–∞–≤—å, –∫–∞–∫ —ç—Ç–∏ –ø—Ä–∏–Ω—Ü–∏–ø—ã –º–æ–∂–Ω–æ –ø—Ä–∏–º–µ–Ω–∏—Ç—å –∫ –Ω–æ–≤–æ–º—É –±–∏–∑–Ω–µ—Å—É. –¢–≤–æ–π –æ—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –∏ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –ø—Ä–∏–º–µ—Ä—ã –∏ –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏.";
        break;
      default:
        prompt = "–¢—ã –±–∏–∑–Ω–µ—Å-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç. –û—Ç–≤–µ—Ç—å –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –∑–∞–ø—Ä–æ—Å, –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏–≤ –ø–æ–ª–µ–∑–Ω—É—é –∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.";
    }
    
    console.log(`–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ OpenAI Assistant –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
    console.log(`–¢–∏–ø –∑–∞–ø—Ä–æ—Å–∞: ${waitingFor}`);
    
    // –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç OpenAI Assistant
    const gptResponse = await getAssistantResponse(prompt, userInput);
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —á–∞—Å—Ç—è–º–∏, –µ—Å–ª–∏ –æ–Ω –¥–ª–∏–Ω–Ω—ã–π
    if (gptResponse.length > 4000) {
      const parts = gptResponse.match(/.{1,4000}/gs);
      for (const part of parts) {
        await ctx.reply(part);
      }
    } else {
      await ctx.reply(gptResponse);
    }
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –Ω–∞—á–∞—Ç—å —Å–Ω–æ–≤–∞
    await ctx.reply("–•–æ—Ç–∏—Ç–µ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –µ—â—ë –æ–¥–∏–Ω –∑–∞–ø—Ä–æ—Å? –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ", {
      reply_markup: {
        inline_keyboard: [
          [{ text: "–û—Ç–∫—Ä—ã—Ç—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –∑–∞–Ω–æ–≤–æ", web_app: { url: process.env.FRONTEND_URL || "https://ai4business-ai.github.io/frontend-repo/" } }]
        ]
      }
    });
    
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ OpenAI API:', error.response?.data || error.message);
    ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∏–Ω–ª–∞–π–Ω-–∑–∞–ø—Ä–æ—Å–æ–≤
bot.on('inline_query', async (ctx) => {
  await ctx.answerInlineQuery([
    {
      type: 'article',
      id: '1',
      title: '–û—Ç–∫—Ä—ã—Ç—å –±–∏–∑–Ω–µ—Å-–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã',
      description: '–ù–∞–∂–º–∏—Ç–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å AI Factory',
      input_message_content: {
        message_text: '–Ø —Ö–æ—á—É –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–∏–∑–Ω–µ—Å-–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º–∏ AI Factory!'
      },
      reply_markup: {
        inline_keyboard: [
          [{ text: "–û—Ç–∫—Ä—ã—Ç—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã", web_app: { url: process.env.FRONTEND_URL || "https://ai4business-ai.github.io/frontend-repo/" } }]
        ]
      }
    }
  ]);
});

// –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–µ—Ä–∞
app.get('/health', (req, res) => {
  res.status(200).json({ 
    status: 'ok', 
    version: '1.1.0',
    environment: NODE_ENV,
    botInfo: {
      webhookMode: NODE_ENV === 'production'
    } 
  });
});

// –ó–∞–ø—É—Å–∫ HTTP —Å–µ—Ä–≤–µ—Ä–∞
const PORT = process.env.PORT || 3000;
app.listen(PORT, () => {
  console.log(`–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT} –≤ —Ä–µ–∂–∏–º–µ ${NODE_ENV}`);
});

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏ –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞
if (NODE_ENV === 'production') {
  // –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å webhook
  const webhookPath = '/webhook';
  const webhookUrl = `${WEBHOOK_URL}${webhookPath}`;
  
  console.log(`–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–µ–±—Ö—É–∫–∞ –Ω–∞ URL: ${webhookUrl}`);
  
  // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Express –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–µ–±—Ö—É–∫–∞
  app.use(bot.webhookCallback(webhookPath));
  
  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–µ–±—Ö—É–∫
  bot.telegram.setWebhook(webhookUrl)
    .then(() => {
      console.log('–í–µ–±—Ö—É–∫ —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
    })
    .catch(err => {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –≤–µ–±—Ö—É–∫–∞:', err);
    });
    
  // –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –≤–µ–±—Ö—É–∫–∞
  app.get('/webhook-info', async (req, res) => {
    try {
      const info = await bot.telegram.getWebhookInfo();
      res.status(200).json(info);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–µ–±—Ö—É–∫–µ:', error);
      res.status(500).json({ error: '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–µ–±—Ö—É–∫–µ' });
    }
  });
} else {
  // –í —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º long polling
  bot.launch()
    .then(() => {
      console.log('Telegram –±–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω –≤ —Ä–µ–∂–∏–º–µ long-polling');
    })
    .catch(err => {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞:', err);
    });
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã—Ö–æ–¥–∞
process.once('SIGINT', () => {
  bot.stop('SIGINT');
});
process.once('SIGTERM', () => {
  bot.stop('SIGTERM');
});
